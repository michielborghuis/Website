import math
alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
freq = [8.4966, 2.072, 4.5388, 3.3844, 11.1607, 1.8121, 2.4705, 3.0034, 7.5448, 0.1965, 1.1016, 5.4893, 3.0129, 6.6544, 7.1635, 3.1671, 0.1962, 7.5809, 5.7351, 6.9509, 3.6308, 1.0074, 1.2899, 0.2902, 1.7779, 0.2722]


def decrypt(text, key):
    return alphabet[alphabet.index(text)-alphabet.index(key)]


def frequencies(lst):
    d = {}
    for letter in alphabet:
        d[letter] = 0
    for letter in lst:
        d[letter] += 1
    result = [d[key]/len(lst)*100 for key in sorted(d.keys())]
    return result


def get_keyword(ciphertext, key_len):
    result = ''
    l = []
    for i in range(key_len):
        l.append(ciphertext[i:][::8])
    for z in range(key_len):
        lowest_score = math.inf
        lowest = None
        for i in range(26):
            a = frequencies(l[z])[i:] + frequencies(l[z])[:i]
            count = 0
            for j in range(26):
                count += abs(a[j] - freq[j])
            if count < lowest_score:
                lowest_score = count
                lowest = i
        result += alphabet[lowest]
    return result

print(get_keyword('MEUUEXJSERVETGJETMIQIXOSEFXIRUFOCOITTFODZSWASZBUXIBZXROXFRBODHCTUCKEIXPNFDATRPTXSIZIBNFTSGCBBPVTDVBYTXIZLPUUVSORHFSFQAIOTYTATHUHFFSYEZWJMLNEWEBOIJMPSZOCXEUIDMEZXFRGSEWYFNDZILXIEFTSGCJSBCOAXUHFGRKUVEOUUYIPFYSAEWUOUSEGXAECSAYMOQBUAXHJFGFRKRUAVUHUVTHBWENECIUTWNMDHDBNHISEGMEIXFDJOTNIJRVTEUJMEUUEXWIENJNMABYTXROXJNHTTEPFFPSEDENPMFIYZJSJCLEHJFGFRKRUFSPMLEVLLOEXWMEUUEXFJGSBMZVJGSBMCSSDGSEWYFNDJEYAPREMETKUHBODYIOTFOCKPFNHUHIEOBFDARGVLBUEJJPRTQEIMGIDBUZLPRTBNJYTEEUOVVPVFPRJMTPSPVKEVTIPRYLJPPGTKBUSFWETJPRBVTNSSSXIOYITTZMEYESEOPTYSEIWFRMIOTBDCAVBTFBVKVBGFMEZXFRGSEWYFNDJEYGBNPOLEFFGMFATIEBZBNGPZZJOGGPBRHFASSVNUPFXIQRFTETXBTJWEZIYTXJTNXIEBWAOPBBJMIZCPFNPDKVOCPNPAXJNHBNJGPLMFCZMPNTPFRESGFUEDXDOSQOXETUDICGPDUMBTOSOSBSEKETIMZMGHFEYBMVPFSDBNHIERBXNLVPMBWAXMFTZPFYSVRDFSVVFSTSEVSSTJOGXIMIHJOAWUEYUSYGJEOUILMDTFYTYEODHFNKVBLGJCZMPNBODZLFRFBRKHJFGFRKRDETFSVIDIBMLEJPRHFNKVBLGJCZMPNXJTNXIEQPSOXJOOPFNEODJXIZLIBFDOSMOGNPRKGPMNPNNISBFSTYDJMJOHOWDLBTSOGJNUSOJYDTPSYIVZPUPGXEQHZUEDXDOEFSGRESFDRKXXRJUITKHIWFSZLFEOHLOWILFUTKVGRFRUKRDYTFQAIOCFBSKXBOOSIYLELGDMAKZPXCVQNYQAUHKQPSUDOSQPNMFTZISPBJRYETTIIEGRSEFSITSOAUODYXFSFOOLXFEEPRZMIIBTTUEODUIESSTTDPMSSODPVBRIELFUTKVTATMLKITSPPTZJGRSONVTDCUIEZSQTXFLBIMEUUEXWDONQROWFACPUZSGTIFTUXBLVTAMIUHFUOVIJGIULKXUESTCUQQRJTEGFPUUPFZLFTPUARYTAHFLKXUESGRKUVEODYGWBFVOCZMPNPGRGRLCBOBKJJTUFDCIMLCZSKZFRBMRGRLFVOCZMPNTXIZLUHFUWUTBRBNEZISCPDHUFFTBSATOGUODTOSOBFJNMXIECFSZEOOUIEXVBNLGUTGUIPOWOXINPBDPYTTBCLKJSEFQAXENEUFRGPTOGJTYXIEMFTZISFSFQAIOCZEIYXSICVTOSORFBSURBBMZWKPMTIFSGQFFVOCZMPNIBSHIFNVTEJXPFJUTNIBMJOOGGJDGSEWYFNDZITTSOUFITWFQVFNIITATQYAWJNHUHKZJCDJPNISOSTOSIPTIFRIMQHFSBGWFDPOAYXSAEELORHCIFCQISBPBRJXZPJDARPZUTFSGQOENPNOGTUDIAYETIOUOKVSDSPPVMOGUIEYIDOOERZSSENFMHISTIFTUTFIHITILBRBDTKVTTIFUYIPFMFTZISFSFQAIOCJFSGREFSFQAIOCZBNGPZSJTPREZSBGUTHBMFOTGPSOMFITGSYQUOMVBMTBNJWFVFSARAPREQUFDMEHBMKWJNDMUJMOGIBNMQBNTDRGFCLFBNJXIEUFLKZJSJPNMENETIOCAIEFMOLJPRUVNKSOEPGTNIFASMIKWUDFTCXMQTJPNORDLBTSOGBLMJTKVBTVSEUJBPQMYORHTIFKTSXLFEGKSGEOHLOWILFUTKVGRFRUKRDYUPSUPWIOHAIVZPUPGXENITGOAREIOFAVSFSGBMUYTSUPREXIEHPLJFVGXIEXIUHFNEZLPDJTSAGDETTFAPMYBQPRMFDUPDKGJPIFRGQFSTBGKMOSUSUIXJNHPNZLFWIFRKECOVUSUJBTSFAYYSEIJDJIOBZDAVXBIOLIJHMEUUEXJSERVETGJETIAJETTSPNMIGFFDTURUHFEEYMHNPGSUQFKFZBUESDMBYUYUSUIESSTTGSEWYFNUMEZXFRTBRKSOTIFBUXUONSOCSGTIFBRMDKFOSJISFFSTETFWSJTKVBNEUHKLPMFSOCSGTIFDBSSALTISTMIGJEJOFYCPAXH', 7))
